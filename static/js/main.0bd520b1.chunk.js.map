{"version":3,"sources":["RhymeFinderApp.js","index.js"],"names":["RhymeFinderApp","inputEl","useRef","useState","rhymes_list","setRhymes_list","description","setDescription","synonyms_list","setSynonyms_list","rhymesVisible","setRhymesVisible","synonymsVisible","setSynonymsVisible","loading","setLoading","savedWords","savedWordsOutput","setSavedWordsOutput","saveWord","newWord","split","push","console","log","join","showRhymes","inputWord","rel_rhy","callback","setresultsExist","current","value","results","fetch","URLSearchParams","toString","then","response","json","data","err","error","showSynonyms","ml","sylElement","groups","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","result","Array","from","keys","sort","key","groupBy","rhymes_elements","resultsExist","parseInt","item","list_el","word","className","onClick","synonyms_elements","list_el_syn","placeholder","ref","type","ReactDOM","render","href","document","getElementById"],"mappings":"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","file":"static/js/main.0bd520b1.chunk.js","sourcesContent":["import { useState, useRef } from 'react';\n\nfunction groupBy(objects, property) {\n  // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  // value for property (obj[property])\n  if (typeof property !== 'function') {\n    const propName = property;\n    property = (obj) => obj[propName];\n  }\n\n  const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  for (const object of objects) {\n    const groupName = property(object);\n    //Make sure that the group exists\n    if (!groupedObjects.has(groupName)) {\n      groupedObjects.set(groupName, []);\n    }\n    groupedObjects.get(groupName).push(object);\n  }\n\n  // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  const result = {};\n  for (const key of Array.from(\n    groupedObjects.keys()\n  ).sort()) {\n    result[key] = groupedObjects.get(key);\n  }\n  return result;\n}\n\nfunction getRhymes(rel_rhy, callback) {\n  fetch(\n    `https://api.datamuse.com/words?${new URLSearchParams({\n      rel_rhy,\n    }).toString()}`\n  )\n    .then((response) => response.json())\n    .then(\n      (data) => {\n        callback(data);\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n}\n\nfunction getSynonyms(ml, callback) {\n  fetch(\n    `https://api.datamuse.com/words?${new URLSearchParams({\n      ml,\n    }).toString()}`\n  )\n    .then((response) => response.json())\n    .then(\n      (data) => {\n        callback(data);\n      },\n      (err) => {\n        console.error(err);\n      }\n    );\n}\n\nfunction RhymeFinderApp() {\n  const inputEl = useRef(null);\n  const [rhymes_list, setRhymes_list] = useState([]);\n  const [description, setDescription] = useState('');\n  const [synonyms_list, setSynonyms_list] = useState('');\n  const [rhymesVisible, setRhymesVisible] = useState(false);\n  const [synonymsVisible, setSynonymsVisible] =\n    useState(false);\n  const [loading, setLoading] = useState(false);\n\n  let savedWords = [];\n  const [savedWordsOutput, setSavedWordsOutput] =\n    useState(null);\n  function saveWord(newWord) {\n    if (savedWordsOutput) {\n      savedWords = savedWordsOutput.split(', ');\n      savedWords.push(newWord);\n      console.log(savedWordsOutput);\n    } else {\n      savedWords.push(newWord);\n    }\n    setSavedWordsOutput(savedWords.join(', ')); //returns list as string and resets savedWordsOutput\n    console.log(savedWordsOutput);\n  }\n\n  function showRhymes() {\n    setresultsExist(true);\n    showRhymeDescription(inputEl.current.value);\n    setLoading(true);\n    getRhymes(inputEl.current.value, (results) => {\n      setRhymes_list(results);\n      setLoading(false);\n      if (results < 1) {\n        setresultsExist(false);\n      }\n    });\n  }\n\n  function showSynonyms() {\n    setresultsExist(true);\n    showSynonymDescription(inputEl.current.value);\n    setLoading(true);\n    getSynonyms(inputEl.current.value, (results) => {\n      // setInputWord(inputEl.current.value);\n      setSynonyms_list(results);\n      setLoading(false);\n      if (results < 1) {\n        setresultsExist(false);\n      }\n    });\n  }\n  function showRhymeDescription(inputWord) {\n    setDescription(\n      'Words that rhyme with ' + inputWord + ':'\n    );\n  }\n\n  function showSynonymDescription(inputWord) {\n    setDescription(\n      'Words that have a similar meaning to ' +\n        inputWord +\n        ':'\n    );\n  }\n\n  let sylElement = null;\n  const groups = groupBy(rhymes_list, 'numSyllables');\n  const rhymes_elements = [];\n  const [resultsExist, setresultsExist] = useState(true);\n\n  for (let obj in groups) {\n    obj = parseInt(obj);\n    if (obj > 1) {\n      sylElement = <h3>{obj} syllables</h3>;\n    } else {\n      sylElement = <h3>{obj} syllable</h3>;\n    }\n    rhymes_elements.push(sylElement);\n    for (const item of groups[obj]) {\n      const list_el = (\n        <li key={item.word}>\n          {item.word}{' '}\n          <button\n            className=\"btn btn-outline-success\"\n            onClick={() => saveWord(item.word)}\n          >\n            Save\n          </button>\n        </li>\n      );\n      rhymes_elements.push(list_el);\n    }\n  }\n\n  const synonyms_elements = [];\n  for (const item of synonyms_list) {\n    const list_el_syn = (\n      <li key={item.word}>\n        {item.word}{' '}\n        <button\n          className=\"btn btn-outline-success\"\n          onClick={() => saveWord(item.word)}\n        >\n          Save\n        </button>\n      </li>\n    );\n    synonyms_elements.push(list_el_syn);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {savedWordsOutput ? (\n          <p>Saved words: {savedWordsOutput}</p>\n        ) : (\n          <p>Saved words: (None)</p>\n        )}\n        <div className=\"row\">\n          <div className=\"input-group col\">\n            <input\n              className=\"form-control\"\n              placeholder=\"Enter a word\"\n              ref={inputEl}\n              type=\"text\"\n            ></input>\n\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                setSynonymsVisible(false);\n                setRhymesVisible(true);\n                showRhymes();\n              }}\n            >\n              Show rhyming words\n            </button>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                setSynonymsVisible(true);\n                setRhymesVisible(false);\n                showSynonyms();\n              }}\n            >\n              Show synonyms\n            </button>\n          </div>\n        </div>\n        <br />\n        <h2 className=\"col\">{description}</h2>\n        {resultsExist ? null : <div>No results.</div>}\n        {loading ? <div>loading...</div> : null}\n        {rhymesVisible ? <ul>{rhymes_elements}</ul> : null}\n        {synonymsVisible ? (\n          <ul>{synonyms_elements}</ul>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default RhymeFinderApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RhymeFinderApp from './RhymeFinderApp.js';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <div className=\"container\">\n      <div>\n        <a href=\"https://github.com/mventrice/579_ps6\">\n          View source code\n        </a>\n      </div>\n      <h1 className=\"row\">Rhyme Finder</h1>\n      <RhymeFinderApp />\n    </div>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}